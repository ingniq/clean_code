// В этом файле приведены примеры плохого наименования (и более верного) переменных мной в моих проектах с указанием ссылок и контекста.
// Формат: было - стало // комментарий к контексту

// Далее указаны кастомные свойства класса, добавленные для нужд юнит-теста (https://github.com/ingniq/algorithms/blob/master/dyn_array/tests.py)
// Плохой пример наименования «da» заставляет держать в памяти расшифровку этого наименования (при этом надо еще найти место в контексте, где становится ясна расшифровка),
// создавая когнитивную нагрузку, риск запутывания и увеличивая временные затраты.

self.da - self.dynamic_array_for_testing
// непосредственно сущность, динамический массив, которая тестируется

// Далее указан ряд свойств, значения в которых используются как константы в различных тестовых случаях.
// Соответственно правильнее было определить их непосредственно как константы, а не свойства класса.
// В целом можно понять, что это значения для использования в тестах, особенно в контексте.
// Однако это не до конца очевидно и это создает некоторую неуверенность или растерянность, когнитивную нагрузку.
// В том числе из-за того, что определены не как константы.

self.test_0 - self.zero_value_for_testing
// нулевое значение для тестирования

self.test_negative - self.negative_value_for_testing
// отрицательное значение для тестирования

self.test_int - self.integer_value_for_testing
// целочисленное значение для тестирования

self.test_str - self.string_value_for_testing
// строковое значение для тестирования

self.test_none - self.none_value_for_testing
// «None»-значение для тестирования

self.test_list - self.list_value_for_testing
// «списковое» значение для тестирования (список, пример сложного типа данных)

// далее случаи из класса, реализующего стэк (https://github.com/ingniq/algorithms/blob/master/stack/stack.py)

result - tail_value
// значение хвостого элемента стэка в возврате метода pop()

result - nodes_found
// найденные узлы в методе find_all()

nodes - all_stack_nodes
// все узлы стэка в методах clean(), len()

// далее случай из класса, реализующего хэш-таблицу (https://github.com/ingniq/algorithms/blob/master/ht/ht.py)

exist - slot_index
// индекс слота хэш-таблицы в методе put().
// Наименование отражает намерение программиста проверить существование, но не отражает намерение тут же вернуть из функции определенное значение переменной.
// Наименование ничего не говорит о том, какие данные предполагаются. 

// далее случай из класса, реализующего множество (https://github.com/ingniq/algorithms/blob/master/ps/ps.py)

result - intersection
// пересечение текущего множества и переданного в функцию intersection()
