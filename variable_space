node = self.head
// Перенес объявление переменной ближе к месту использования и после условия проверки,
// чтобы зря не создавать переменную перед проверкой.
// https://github.com/ingniq/algorithms/blob/master/ll/ll.py#L56


__update_hits(self, key_index: int) -> void
// Вынес блок кода в отдельную функцию.
// https://github.com/ingniq/algorithms/blob/master/nc/nc.py#L102


return True if self.find(key) else False
// Убрал лишнюю переменную.
// https://github.com/ingniq/algorithms/blob/master/nd/nd.py#L25


index = kwargs.get("index")
// Объявление переменной можно перенести на пять строк ближе к месту первого использования.
// Чтобы не было окна "уязвимости".
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L24


timeout = kwargs.get("timeout", 3)
// Объявление переменной можно перенести на 17 строк ближе к месту первого использования.
// Чтобы не было окна "уязвимости".
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L25


useLocalLiteServer = kwargs.get("useLocalLiteServer", True)
validatorStatus = self.ton.GetValidatorStatus()
validatorOutOfSync = validatorStatus.get("outOfSync")
args = [self.appPath, "--global-config", self.configPath, "--verbosity", "0", "--cmd", cmd]
if index is not None:
    index = str(index)
    args += ["-i", index]
elif useLocalLiteServer and self.pubkeyPath and validatorOutOfSync < 20:
    args = [self.appPath, "--addr", self.addr, "--pub", self.pubkeyPath, "--verbosity", "0", "--cmd", cmd]
else:
    liteServers = local.db.get("liteServers")
    if liteServers is not None and len(liteServers):
        index = random.choice(liteServers)
        index = str(index)
        args += ["-i", index]
#end if
// Можно вынести в отдельный метод -- compose_arguments(self, index)
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L26


liteClient = local.db.get("liteClient")
if liteClient is not None:
    self.liteClient.ton = self # magic
    self.liteClient.appPath = liteClient["appPath"]
    self.liteClient.configPath = liteClient["configPath"]
    liteServer = liteClient.get("liteServer")
    if liteServer is not None:
        self.liteClient.pubkeyPath = liteServer["pubkeyPath"]
        self.liteClient.addr = "{0}:{1}".format(liteServer["ip"], liteServer["port"])
#end if
// Можно вынести в отдельный метод -- refresh_lite_client(self)
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L309


validatorConsole = local.db.get("validatorConsole")
if validatorConsole is not None:
    self.validatorConsole.appPath = validatorConsole["appPath"]
    self.validatorConsole.privKeyPath = validatorConsole["privKeyPath"]
    self.validatorConsole.pubKeyPath = validatorConsole["pubKeyPath"]
    self.validatorConsole.addr = validatorConsole["addr"]
#end if
// Можно вынести в отдельный метод -- refresh_validator_console(self)
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L320


fift = local.db.get("fift")
if fift is not None:
    self.fift.appPath = fift["appPath"]
    self.fift.libsPath = fift["libsPath"]
    self.fift.smartcontsPath = fift["smartcontsPath"]
#end if
// Можно вынести в отдельный метод -- refresh_fift(self)
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L328


if account.balance < coins + 0.1:
// Эту проверку стоит перенести в самое начало метода, перед созданием каких-либо переменных.
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L1384


flags = kwargs.get("flags", list())
// Объявление переменной можно перенести на 12 строк ближе к месту первого использования.
// Чтобы не было окна "уязвимости".
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L1380


subwalletDefault = 698983191 + wallet.workchain # 0x29A9A317 + workchain
subwallet = kwargs.get("subwallet", subwalletDefault)
// Объявление этих переменных стоит перенести в едниственное место их использования -- в тело условия 'elif "v3" in wallet.version:'
// что значительно ограничит область видимости этих переменных, сделает более читаемым код и уберет окно "уязвимости".
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L1382


# Bounceable checking
destAccount = self.GetAccount(dest)
bounceable = self.IsBounceableAddrB64(dest)
if bounceable == False and destAccount.status == "active":
    flags += ["-b"]
    text = "Find non-bounceable flag, but destination account already active. Using bounceable flag"
    local.AddLog(text, "warning")
elif "-n" not in flags and bounceable == True and destAccount.status != "active":
    raise Exception("Find bounceable flag, but destination account is not active. Use non-bounceable address or flag -n")
#end if
// Можно вынести в отдельный метод -- bounceable_checking(self)
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L1390


usePool = local.db.get("usePool")
// Объявление переменной можно перенести на 24 строки ближе к месту первого использования.
// Чтобы не было окна "уязвимости".
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L1473


stakePercent = local.db.get("stakePercent", 99)
// Объявление переменной стоит перенести в едниственное место ее использования -- в тело условия 'if stake is None:'
// что значительно ограничит область видимости этой переменной, сделает более читаемым код и уберет окно "уязвимости".
// https://github.com/ton-blockchain/mytonctrl/blob/master/mytoncore.py#L1382
